-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module TextUSM.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import TextUSM.InputObject
import TextUSM.Interface
import TextUSM.Object
import TextUSM.Scalar
import TextUSM.ScalarCodecs
import TextUSM.Union


type alias SaveOptionalArguments =
    { isPublic : OptionalArgument Bool }


type alias SaveRequiredArguments =
    { input : TextUSM.InputObject.InputItem }


{-|

  - input -
  - isPublic -

-}
save :
    (SaveOptionalArguments -> SaveOptionalArguments)
    -> SaveRequiredArguments
    -> SelectionSet decodesTo TextUSM.Object.Item
    -> SelectionSet decodesTo RootMutation
save fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { isPublic = Absent }

        optionalArgs____ =
            [ Argument.optional "isPublic" filledInOptionals____.isPublic Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "save" (optionalArgs____ ++ [ Argument.required "input" requiredArgs____.input TextUSM.InputObject.encodeInputItem ]) object____ identity


type alias DeleteOptionalArguments =
    { isPublic : OptionalArgument Bool }


type alias DeleteRequiredArguments =
    { itemID : String }


{-|

  - itemID -
  - isPublic -

-}
delete :
    (DeleteOptionalArguments -> DeleteOptionalArguments)
    -> DeleteRequiredArguments
    -> SelectionSet String RootMutation
delete fillInOptionals____ requiredArgs____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { isPublic = Absent }

        optionalArgs____ =
            [ Argument.optional "isPublic" filledInOptionals____.isPublic Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionForField "String" "delete" (optionalArgs____ ++ [ Argument.required "itemID" requiredArgs____.itemID Encode.string ]) Decode.string


type alias BookmarkRequiredArguments =
    { itemID : String
    , isBookmark : Bool
    }


{-|

  - itemID -
  - isBookmark -

-}
bookmark :
    BookmarkRequiredArguments
    -> SelectionSet decodesTo TextUSM.Object.Item
    -> SelectionSet (Maybe decodesTo) RootMutation
bookmark requiredArgs____ object____ =
    Object.selectionForCompositeField "bookmark" [ Argument.required "itemID" requiredArgs____.itemID Encode.string, Argument.required "isBookmark" requiredArgs____.isBookmark Encode.bool ] object____ (identity >> Decode.nullable)


type alias ShareOptionalArguments =
    { expSecond : OptionalArgument Int
    , password : OptionalArgument String
    }


type alias ShareRequiredArguments =
    { itemID : String }


{-|

  - itemID -
  - expSecond -
  - password -

-}
share :
    (ShareOptionalArguments -> ShareOptionalArguments)
    -> ShareRequiredArguments
    -> SelectionSet String RootMutation
share fillInOptionals____ requiredArgs____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { expSecond = Absent, password = Absent }

        optionalArgs____ =
            [ Argument.optional "expSecond" filledInOptionals____.expSecond Encode.int, Argument.optional "password" filledInOptionals____.password Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForField "String" "share" (optionalArgs____ ++ [ Argument.required "itemID" requiredArgs____.itemID Encode.string ]) Decode.string
