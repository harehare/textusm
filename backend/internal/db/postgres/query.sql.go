// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO
  items (
    uid,
    diagram,
    diagram_id,
    is_bookmark,
    is_public,
    title,
    text,
    thumbnail,
    location
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateItemParams struct {
	Uid        string
	Diagram    Diagram
	DiagramID  pgtype.UUID
	IsBookmark *bool
	IsPublic   *bool
	Title      *string
	Text       string
	Thumbnail  *string
	Location   Location
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.Exec(ctx, createItem,
		arg.Uid,
		arg.Diagram,
		arg.DiagramID,
		arg.IsBookmark,
		arg.IsPublic,
		arg.Title,
		arg.Text,
		arg.Thumbnail,
		arg.Location,
	)
	return err
}

const createSettings = `-- name: CreateSettings :exec
INSERT INTO
  settings (
    uid,
    activity_color,
    activity_background_color,
    background_color,
    height,
    diagram,
    line_color,
    label_color,
    lock_editing,
    text_color,
    toolbar,
    scale,
    show_grid,
    story_color,
    story_background_color,
    task_color,
    task_background_color,
    width,
    zoom_control
  )
VALUES
  (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19
  )
`

type CreateSettingsParams struct {
	Uid                     string
	ActivityColor           *string
	ActivityBackgroundColor *string
	BackgroundColor         *string
	Height                  *int32
	Diagram                 Diagram
	LineColor               *string
	LabelColor              *string
	LockEditing             *bool
	TextColor               *string
	Toolbar                 *bool
	Scale                   *float32
	ShowGrid                *bool
	StoryColor              *string
	StoryBackgroundColor    *string
	TaskColor               *string
	TaskBackgroundColor     *string
	Width                   *int32
	ZoomControl             *bool
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) error {
	_, err := q.db.Exec(ctx, createSettings,
		arg.Uid,
		arg.ActivityColor,
		arg.ActivityBackgroundColor,
		arg.BackgroundColor,
		arg.Height,
		arg.Diagram,
		arg.LineColor,
		arg.LabelColor,
		arg.LockEditing,
		arg.TextColor,
		arg.Toolbar,
		arg.Scale,
		arg.ShowGrid,
		arg.StoryColor,
		arg.StoryBackgroundColor,
		arg.TaskColor,
		arg.TaskBackgroundColor,
		arg.Width,
		arg.ZoomControl,
	)
	return err
}

const createShareCondition = `-- name: CreateShareCondition :exec
INSERT INTO
  share_conditions (
    uid,
    hashkey,
    diagram_id,
    location,
    allow_ip_list,
    allow_email_list,
    expire_time,
    password,
    token
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateShareConditionParams struct {
	Uid            string
	Hashkey        string
	DiagramID      pgtype.UUID
	Location       Location
	AllowIpList    []string
	AllowEmailList []string
	ExpireTime     *int64
	Password       *string
	Token          string
}

func (q *Queries) CreateShareCondition(ctx context.Context, arg CreateShareConditionParams) error {
	_, err := q.db.Exec(ctx, createShareCondition,
		arg.Uid,
		arg.Hashkey,
		arg.DiagramID,
		arg.Location,
		arg.AllowIpList,
		arg.AllowEmailList,
		arg.ExpireTime,
		arg.Password,
		arg.Token,
	)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE
  diagram_id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, diagramID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteItem, diagramID)
	return err
}

const deleteShareCondition = `-- name: DeleteShareCondition :exec
DELETE FROM share_conditions
WHERE
  hashkey = $1
`

func (q *Queries) DeleteShareCondition(ctx context.Context, hashkey string) error {
	_, err := q.db.Exec(ctx, deleteShareCondition, hashkey)
	return err
}

const deleteShareConditionItem = `-- name: DeleteShareConditionItem :exec
DELETE FROM share_conditions
WHERE
  location = $1
  AND diagram_id = $2
`

type DeleteShareConditionItemParams struct {
	Location  Location
	DiagramID pgtype.UUID
}

func (q *Queries) DeleteShareConditionItem(ctx context.Context, arg DeleteShareConditionItemParams) error {
	_, err := q.db.Exec(ctx, deleteShareConditionItem, arg.Location, arg.DiagramID)
	return err
}

const getItem = `-- name: GetItem :one
SELECT
  id, uid, diagram_id, location, diagram, is_bookmark, is_public, title, text, thumbnail, created_at, updated_at
FROM
  items
WHERE
  location = $1
  AND diagram_id = $2
`

type GetItemParams struct {
	Location  Location
	DiagramID pgtype.UUID
}

func (q *Queries) GetItem(ctx context.Context, arg GetItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, getItem, arg.Location, arg.DiagramID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.DiagramID,
		&i.Location,
		&i.Diagram,
		&i.IsBookmark,
		&i.IsPublic,
		&i.Title,
		&i.Text,
		&i.Thumbnail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSettings = `-- name: GetSettings :one
SELECT
  id, uid, activity_color, activity_background_color, background_color, diagram, height, font, line_color, label_color, lock_editing, text_color, toolbar, scale, show_grid, story_color, story_background_color, task_color, task_background_color, width, zoom_control, created_at, updated_at
FROM
  settings
WHERE
  diagram = $1
`

func (q *Queries) GetSettings(ctx context.Context, diagram Diagram) (Setting, error) {
	row := q.db.QueryRow(ctx, getSettings, diagram)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.ActivityColor,
		&i.ActivityBackgroundColor,
		&i.BackgroundColor,
		&i.Diagram,
		&i.Height,
		&i.Font,
		&i.LineColor,
		&i.LabelColor,
		&i.LockEditing,
		&i.TextColor,
		&i.Toolbar,
		&i.Scale,
		&i.ShowGrid,
		&i.StoryColor,
		&i.StoryBackgroundColor,
		&i.TaskColor,
		&i.TaskBackgroundColor,
		&i.Width,
		&i.ZoomControl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShareCondition = `-- name: GetShareCondition :one
SELECT
  id, hashkey, uid, diagram_id, location, allow_ip_list, allow_email_list, expire_time, password, token, created_at, updated_at
FROM
  share_conditions
WHERE
  hashkey = $1
`

func (q *Queries) GetShareCondition(ctx context.Context, hashkey string) (ShareCondition, error) {
	row := q.db.QueryRow(ctx, getShareCondition, hashkey)
	var i ShareCondition
	err := row.Scan(
		&i.ID,
		&i.Hashkey,
		&i.Uid,
		&i.DiagramID,
		&i.Location,
		&i.AllowIpList,
		&i.AllowEmailList,
		&i.ExpireTime,
		&i.Password,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShareConditionItem = `-- name: GetShareConditionItem :one
SELECT
  id, hashkey, uid, diagram_id, location, allow_ip_list, allow_email_list, expire_time, password, token, created_at, updated_at
FROM
  share_conditions
WHERE
  location = $1
  AND diagram_id = $2
`

type GetShareConditionItemParams struct {
	Location  Location
	DiagramID pgtype.UUID
}

func (q *Queries) GetShareConditionItem(ctx context.Context, arg GetShareConditionItemParams) (ShareCondition, error) {
	row := q.db.QueryRow(ctx, getShareConditionItem, arg.Location, arg.DiagramID)
	var i ShareCondition
	err := row.Scan(
		&i.ID,
		&i.Hashkey,
		&i.Uid,
		&i.DiagramID,
		&i.Location,
		&i.AllowIpList,
		&i.AllowEmailList,
		&i.ExpireTime,
		&i.Password,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT
  id, uid, diagram_id, location, diagram, is_bookmark, is_public, title, text, thumbnail, created_at, updated_at
FROM
  items
WHERE
  location = $1
  AND is_public = $2
  AND is_bookmark = $3
LIMIT
  $4
OFFSET
  $5
`

type ListItemsParams struct {
	Location   Location
	IsPublic   *bool
	IsBookmark *bool
	Limit      int32
	Offset     int32
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.db.Query(ctx, listItems,
		arg.Location,
		arg.IsPublic,
		arg.IsBookmark,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.DiagramID,
			&i.Location,
			&i.Diagram,
			&i.IsBookmark,
			&i.IsPublic,
			&i.Title,
			&i.Text,
			&i.Thumbnail,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
SET
  diagram = $1,
  is_bookmark = $2,
  is_public = $3,
  title = $4,
  text = $5,
  thumbnail = $6,
  location = $7,
  updated_at = NOW()
WHERE
  diagram_id = $8
`

type UpdateItemParams struct {
	Diagram    Diagram
	IsBookmark *bool
	IsPublic   *bool
	Title      *string
	Text       string
	Thumbnail  *string
	Location   Location
	DiagramID  pgtype.UUID
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.Exec(ctx, updateItem,
		arg.Diagram,
		arg.IsBookmark,
		arg.IsPublic,
		arg.Title,
		arg.Text,
		arg.Thumbnail,
		arg.Location,
		arg.DiagramID,
	)
	return err
}

const updateSettings = `-- name: UpdateSettings :exec
UPDATE settings
SET
  activity_color = $1,
  activity_background_color = $2,
  background_color = $3,
  height = $4,
  line_color = $5,
  label_color = $6,
  lock_editing = $7,
  text_color = $8,
  toolbar = $9,
  scale = $10,
  show_grid = $11,
  story_color = $12,
  story_background_color = $13,
  task_color = $14,
  task_background_color = $15,
  width = $16,
  zoom_control = $17
WHERE
  diagram = $2
`

type UpdateSettingsParams struct {
	ActivityColor           *string
	ActivityBackgroundColor *string
	BackgroundColor         *string
	Height                  *int32
	LineColor               *string
	LabelColor              *string
	LockEditing             *bool
	TextColor               *string
	Toolbar                 *bool
	Scale                   *float32
	ShowGrid                *bool
	StoryColor              *string
	StoryBackgroundColor    *string
	TaskColor               *string
	TaskBackgroundColor     *string
	Width                   *int32
	ZoomControl             *bool
}

func (q *Queries) UpdateSettings(ctx context.Context, arg UpdateSettingsParams) error {
	_, err := q.db.Exec(ctx, updateSettings,
		arg.ActivityColor,
		arg.ActivityBackgroundColor,
		arg.BackgroundColor,
		arg.Height,
		arg.LineColor,
		arg.LabelColor,
		arg.LockEditing,
		arg.TextColor,
		arg.Toolbar,
		arg.Scale,
		arg.ShowGrid,
		arg.StoryColor,
		arg.StoryBackgroundColor,
		arg.TaskColor,
		arg.TaskBackgroundColor,
		arg.Width,
		arg.ZoomControl,
	)
	return err
}
