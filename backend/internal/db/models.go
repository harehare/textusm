// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type Diagram string

const (
	DiagramUSERSTORYMAP        Diagram = "USER_STORY_MAP"
	DiagramOPPORTUNITYCANVAS   Diagram = "OPPORTUNITY_CANVAS"
	DiagramBUSINESSMODELCANVAS Diagram = "BUSINESS_MODEL_CANVAS"
	DiagramFOURLS              Diagram = "FOURLS"
	DiagramSTARTSTOPCONTINUE   Diagram = "START_STOP_CONTINUE"
	DiagramKPT                 Diagram = "KPT"
	DiagramUSERPERSONA         Diagram = "USER_PERSONA"
	DiagramMINDMAP             Diagram = "MIND_MAP"
	DiagramEMPATHYMAP          Diagram = "EMPATHY_MAP"
	DiagramSITEMAP             Diagram = "SITE_MAP"
	DiagramGANTTCHART          Diagram = "GANTT_CHART"
	DiagramIMPACTMAP           Diagram = "IMPACT_MAP"
	DiagramERDIAGRAM           Diagram = "ER_DIAGRAM"
	DiagramKANBAN              Diagram = "KANBAN"
	DiagramTABLE               Diagram = "TABLE"
	DiagramSEQUENCEDIAGRAM     Diagram = "SEQUENCE_DIAGRAM"
	DiagramFREEFORM            Diagram = "FREEFORM"
	DiagramUSECASEDIAGRAM      Diagram = "USE_CASE_DIAGRAM"
	DiagramKEYBOARDLAYOUT      Diagram = "KEYBOARD_LAYOUT"
)

func (e *Diagram) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Diagram(s)
	case string:
		*e = Diagram(s)
	default:
		return fmt.Errorf("unsupported scan type for Diagram: %T", src)
	}
	return nil
}

type NullDiagram struct {
	Diagram Diagram
	Valid   bool // Valid is true if Diagram is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiagram) Scan(value interface{}) error {
	if value == nil {
		ns.Diagram, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Diagram.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiagram) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Diagram), nil
}

type Location string

const (
	LocationSYSTEM Location = "SYSTEM"
	LocationGIST   Location = "GIST"
)

func (e *Location) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Location(s)
	case string:
		*e = Location(s)
	default:
		return fmt.Errorf("unsupported scan type for Location: %T", src)
	}
	return nil
}

type NullLocation struct {
	Location Location
	Valid    bool // Valid is true if Location is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLocation) Scan(value interface{}) error {
	if value == nil {
		ns.Location, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Location.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLocation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Location), nil
}

type Item struct {
	ID         int64
	Uid        string
	DiagramID  uuid.NullUUID
	Location   Location
	Diagram    Diagram
	IsBookmark sql.NullBool
	IsPublic   sql.NullBool
	Title      sql.NullString
	Text       string
	Thumbnail  sql.NullString
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

type Setting struct {
	ID                      int64
	Uid                     string
	ActivityColor           sql.NullString
	ActivityBackgroundColor sql.NullString
	BackgroundColor         sql.NullString
	Diagram                 Diagram
	Height                  sql.NullInt32
	LineColor               sql.NullString
	LabelColor              sql.NullString
	LockEditing             sql.NullBool
	TextColor               sql.NullString
	Toolbar                 sql.NullBool
	Scale                   sql.NullFloat64
	ShowGrid                sql.NullBool
	StoryColor              sql.NullString
	StoryBackgroundColor    sql.NullString
	TaskColor               sql.NullString
	TaskBackgroundColor     sql.NullString
	Width                   sql.NullInt32
	ZoomControl             sql.NullBool
	CreatedAt               sql.NullTime
	UpdatedAt               sql.NullTime
}

type ShareCondition struct {
	ID             int64
	Uid            string
	DiagramID      uuid.NullUUID
	AllowIpList    []string
	AllowEmailList []string
	ExpireTime     sql.NullInt32
	Password       sql.NullString
	Token          string
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}
