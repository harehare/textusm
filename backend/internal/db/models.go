// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Diagram string

const (
	DiagramUSERSTORYMAP        Diagram = "USER_STORY_MAP"
	DiagramOPPORTUNITYCANVAS   Diagram = "OPPORTUNITY_CANVAS"
	DiagramBUSINESSMODELCANVAS Diagram = "BUSINESS_MODEL_CANVAS"
	DiagramFOURLS              Diagram = "FOURLS"
	DiagramSTARTSTOPCONTINUE   Diagram = "START_STOP_CONTINUE"
	DiagramKPT                 Diagram = "KPT"
	DiagramUSERPERSONA         Diagram = "USER_PERSONA"
	DiagramMINDMAP             Diagram = "MIND_MAP"
	DiagramEMPATHYMAP          Diagram = "EMPATHY_MAP"
	DiagramSITEMAP             Diagram = "SITE_MAP"
	DiagramGANTTCHART          Diagram = "GANTT_CHART"
	DiagramIMPACTMAP           Diagram = "IMPACT_MAP"
	DiagramERDIAGRAM           Diagram = "ER_DIAGRAM"
	DiagramKANBAN              Diagram = "KANBAN"
	DiagramTABLE               Diagram = "TABLE"
	DiagramSEQUENCEDIAGRAM     Diagram = "SEQUENCE_DIAGRAM"
	DiagramFREEFORM            Diagram = "FREEFORM"
	DiagramUSECASEDIAGRAM      Diagram = "USE_CASE_DIAGRAM"
	DiagramKEYBOARDLAYOUT      Diagram = "KEYBOARD_LAYOUT"
)

func (e *Diagram) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Diagram(s)
	case string:
		*e = Diagram(s)
	default:
		return fmt.Errorf("unsupported scan type for Diagram: %T", src)
	}
	return nil
}

type NullDiagram struct {
	Diagram Diagram
	Valid   bool // Valid is true if Diagram is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiagram) Scan(value interface{}) error {
	if value == nil {
		ns.Diagram, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Diagram.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiagram) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Diagram), nil
}

type Location string

const (
	LocationSYSTEM Location = "SYSTEM"
	LocationGIST   Location = "GIST"
)

func (e *Location) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Location(s)
	case string:
		*e = Location(s)
	default:
		return fmt.Errorf("unsupported scan type for Location: %T", src)
	}
	return nil
}

type NullLocation struct {
	Location Location
	Valid    bool // Valid is true if Location is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLocation) Scan(value interface{}) error {
	if value == nil {
		ns.Location, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Location.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLocation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Location), nil
}

type Item struct {
	ID         int64
	Uid        string
	DiagramID  pgtype.UUID
	Location   Location
	Diagram    Diagram
	IsBookmark *bool
	IsPublic   *bool
	Title      *string
	Text       string
	Thumbnail  *string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type Setting struct {
	ID                      int64
	Uid                     string
	ActivityColor           *string
	ActivityBackgroundColor *string
	BackgroundColor         *string
	Diagram                 Diagram
	Height                  *int32
	LineColor               *string
	LabelColor              *string
	LockEditing             *bool
	TextColor               *string
	Toolbar                 *bool
	Scale                   *float32
	ShowGrid                *bool
	StoryColor              *string
	StoryBackgroundColor    *string
	TaskColor               *string
	TaskBackgroundColor     *string
	Width                   *int32
	ZoomControl             *bool
	CreatedAt               pgtype.Timestamp
	UpdatedAt               pgtype.Timestamp
}

type ShareCondition struct {
	ID             int64
	Uid            string
	DiagramID      pgtype.UUID
	AllowIpList    []string
	AllowEmailList []string
	ExpireTime     *int32
	Password       *string
	Token          string
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}
