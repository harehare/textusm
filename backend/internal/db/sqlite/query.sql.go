// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO
  items (
    uid,
    diagram,
    diagram_id,
    is_bookmark,
    is_public,
    title,
    text,
    thumbnail,
    location,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateItemParams struct {
	Uid        string
	Diagram    string
	DiagramID  string
	IsBookmark int64
	IsPublic   int64
	Title      sql.NullString
	Text       string
	Thumbnail  sql.NullString
	Location   string
	CreatedAt  int64
	UpdatedAt  int64
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.Uid,
		arg.Diagram,
		arg.DiagramID,
		arg.IsBookmark,
		arg.IsPublic,
		arg.Title,
		arg.Text,
		arg.Thumbnail,
		arg.Location,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createSettings = `-- name: CreateSettings :exec
INSERT INTO
  settings (
    uid,
    activity_color,
    activity_background_color,
    background_color,
    height,
    diagram,
    line_color,
    label_color,
    lock_editing,
    text_color,
    toolbar,
    scale,
    show_grid,
    story_color,
    story_background_color,
    task_color,
    task_background_color,
    width,
    zoom_control,
    created_at,
    updated_at
  )
VALUES
  (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
  )
`

type CreateSettingsParams struct {
	Uid                     string
	ActivityColor           string
	ActivityBackgroundColor string
	BackgroundColor         string
	Height                  int64
	Diagram                 string
	LineColor               string
	LabelColor              string
	LockEditing             sql.NullInt64
	TextColor               sql.NullString
	Toolbar                 sql.NullInt64
	Scale                   float64
	ShowGrid                sql.NullInt64
	StoryColor              string
	StoryBackgroundColor    string
	TaskColor               string
	TaskBackgroundColor     string
	Width                   int64
	ZoomControl             sql.NullInt64
	CreatedAt               int64
	UpdatedAt               int64
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) error {
	_, err := q.db.ExecContext(ctx, createSettings,
		arg.Uid,
		arg.ActivityColor,
		arg.ActivityBackgroundColor,
		arg.BackgroundColor,
		arg.Height,
		arg.Diagram,
		arg.LineColor,
		arg.LabelColor,
		arg.LockEditing,
		arg.TextColor,
		arg.Toolbar,
		arg.Scale,
		arg.ShowGrid,
		arg.StoryColor,
		arg.StoryBackgroundColor,
		arg.TaskColor,
		arg.TaskBackgroundColor,
		arg.Width,
		arg.ZoomControl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createShareCondition = `-- name: CreateShareCondition :exec
INSERT INTO
  share_conditions (
    uid,
    hashkey,
    diagram_id,
    location,
    allow_ip_list,
    allow_email_list,
    expire_time,
    password,
    token,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateShareConditionParams struct {
	Uid            string
	Hashkey        string
	DiagramID      string
	Location       string
	AllowIpList    sql.NullString
	AllowEmailList sql.NullString
	ExpireTime     sql.NullInt64
	Password       sql.NullString
	Token          string
	CreatedAt      int64
	UpdatedAt      int64
}

func (q *Queries) CreateShareCondition(ctx context.Context, arg CreateShareConditionParams) error {
	_, err := q.db.ExecContext(ctx, createShareCondition,
		arg.Uid,
		arg.Hashkey,
		arg.DiagramID,
		arg.Location,
		arg.AllowIpList,
		arg.AllowEmailList,
		arg.ExpireTime,
		arg.Password,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE
  uid = ?
  AND diagram_id = ?
`

type DeleteItemParams struct {
	Uid       string
	DiagramID string
}

func (q *Queries) DeleteItem(ctx context.Context, arg DeleteItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteItem, arg.Uid, arg.DiagramID)
	return err
}

const deleteShareCondition = `-- name: DeleteShareCondition :exec
DELETE FROM share_conditions
WHERE
  hashkey = ?
`

func (q *Queries) DeleteShareCondition(ctx context.Context, hashkey string) error {
	_, err := q.db.ExecContext(ctx, deleteShareCondition, hashkey)
	return err
}

const deleteShareConditionItem = `-- name: DeleteShareConditionItem :exec
DELETE FROM share_conditions
WHERE
  uid = ?
  AND location = ?
  AND diagram_id = ?
`

type DeleteShareConditionItemParams struct {
	Uid       string
	Location  string
	DiagramID string
}

func (q *Queries) DeleteShareConditionItem(ctx context.Context, arg DeleteShareConditionItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteShareConditionItem, arg.Uid, arg.Location, arg.DiagramID)
	return err
}

const getItem = `-- name: GetItem :one
SELECT
  id, uid, diagram_id, location, diagram, is_bookmark, is_public, title, text, thumbnail, created_at, updated_at
FROM
  items
WHERE
  uid = ?
  AND location = ?
  AND diagram_id = ?
`

type GetItemParams struct {
	Uid       string
	Location  string
	DiagramID string
}

func (q *Queries) GetItem(ctx context.Context, arg GetItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, arg.Uid, arg.Location, arg.DiagramID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.DiagramID,
		&i.Location,
		&i.Diagram,
		&i.IsBookmark,
		&i.IsPublic,
		&i.Title,
		&i.Text,
		&i.Thumbnail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSettings = `-- name: GetSettings :one
SELECT
  id, uid, activity_color, activity_background_color, background_color, diagram, height, font, line_color, label_color, lock_editing, text_color, toolbar, scale, show_grid, story_color, story_background_color, task_color, task_background_color, width, zoom_control, created_at, updated_at
FROM
  settings
WHERE
  uid = ?
  AND diagram = ?
`

type GetSettingsParams struct {
	Uid     string
	Diagram string
}

func (q *Queries) GetSettings(ctx context.Context, arg GetSettingsParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSettings, arg.Uid, arg.Diagram)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.ActivityColor,
		&i.ActivityBackgroundColor,
		&i.BackgroundColor,
		&i.Diagram,
		&i.Height,
		&i.Font,
		&i.LineColor,
		&i.LabelColor,
		&i.LockEditing,
		&i.TextColor,
		&i.Toolbar,
		&i.Scale,
		&i.ShowGrid,
		&i.StoryColor,
		&i.StoryBackgroundColor,
		&i.TaskColor,
		&i.TaskBackgroundColor,
		&i.Width,
		&i.ZoomControl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShareCondition = `-- name: GetShareCondition :one
SELECT
  id, hashkey, uid, diagram_id, location, allow_ip_list, allow_email_list, expire_time, password, token, created_at, updated_at
FROM
  share_conditions
WHERE
  hashkey = ?
`

func (q *Queries) GetShareCondition(ctx context.Context, hashkey string) (ShareCondition, error) {
	row := q.db.QueryRowContext(ctx, getShareCondition, hashkey)
	var i ShareCondition
	err := row.Scan(
		&i.ID,
		&i.Hashkey,
		&i.Uid,
		&i.DiagramID,
		&i.Location,
		&i.AllowIpList,
		&i.AllowEmailList,
		&i.ExpireTime,
		&i.Password,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShareConditionItem = `-- name: GetShareConditionItem :one
SELECT
  id, hashkey, uid, diagram_id, location, allow_ip_list, allow_email_list, expire_time, password, token, created_at, updated_at
FROM
  share_conditions
WHERE
  uid = ?
  AND location = ?
  AND diagram_id = ?
`

type GetShareConditionItemParams struct {
	Uid       string
	Location  string
	DiagramID string
}

func (q *Queries) GetShareConditionItem(ctx context.Context, arg GetShareConditionItemParams) (ShareCondition, error) {
	row := q.db.QueryRowContext(ctx, getShareConditionItem, arg.Uid, arg.Location, arg.DiagramID)
	var i ShareCondition
	err := row.Scan(
		&i.ID,
		&i.Hashkey,
		&i.Uid,
		&i.DiagramID,
		&i.Location,
		&i.AllowIpList,
		&i.AllowEmailList,
		&i.ExpireTime,
		&i.Password,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT
  id, uid, diagram_id, location, diagram, is_bookmark, is_public, title, text, thumbnail, created_at, updated_at
FROM
  items
WHERE
  uid = ?
  AND location = ?
  AND is_public = ?
  AND is_bookmark = ?
LIMIT
  ?
OFFSET
  ?
`

type ListItemsParams struct {
	Uid        string
	Location   string
	IsPublic   int64
	IsBookmark int64
	Limit      int64
	Offset     int64
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems,
		arg.Uid,
		arg.Location,
		arg.IsPublic,
		arg.IsBookmark,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.DiagramID,
			&i.Location,
			&i.Diagram,
			&i.IsBookmark,
			&i.IsPublic,
			&i.Title,
			&i.Text,
			&i.Thumbnail,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
SET
  diagram = ?,
  is_bookmark = ?,
  is_public = ?,
  title = ?,
  text = ?,
  thumbnail = ?,
  location = ?,
  updated_at = ?
WHERE
  uid = ?
  AND diagram_id = ?
`

type UpdateItemParams struct {
	Diagram    string
	IsBookmark int64
	IsPublic   int64
	Title      sql.NullString
	Text       string
	Thumbnail  sql.NullString
	Location   string
	UpdatedAt  int64
	Uid        string
	DiagramID  string
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem,
		arg.Diagram,
		arg.IsBookmark,
		arg.IsPublic,
		arg.Title,
		arg.Text,
		arg.Thumbnail,
		arg.Location,
		arg.UpdatedAt,
		arg.Uid,
		arg.DiagramID,
	)
	return err
}

const updateSettings = `-- name: UpdateSettings :exec
UPDATE settings
SET
  activity_color = ?,
  activity_background_color = ?,
  background_color = ?,
  height = ?,
  line_color = ?,
  label_color = ?,
  lock_editing = ?,
  text_color = ?,
  toolbar = ?,
  scale = ?,
  show_grid = ?,
  story_color = ?,
  story_background_color = ?,
  task_color = ?,
  task_background_color = ?,
  width = ?,
  zoom_control = ?,
  updated_at = ?
WHERE
  uid = ?
  AND diagram = ?
`

type UpdateSettingsParams struct {
	ActivityColor           string
	ActivityBackgroundColor string
	BackgroundColor         string
	Height                  int64
	LineColor               string
	LabelColor              string
	LockEditing             sql.NullInt64
	TextColor               sql.NullString
	Toolbar                 sql.NullInt64
	Scale                   float64
	ShowGrid                sql.NullInt64
	StoryColor              string
	StoryBackgroundColor    string
	TaskColor               string
	TaskBackgroundColor     string
	Width                   int64
	ZoomControl             sql.NullInt64
	UpdatedAt               int64
	Uid                     string
	Diagram                 string
}

func (q *Queries) UpdateSettings(ctx context.Context, arg UpdateSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateSettings,
		arg.ActivityColor,
		arg.ActivityBackgroundColor,
		arg.BackgroundColor,
		arg.Height,
		arg.LineColor,
		arg.LabelColor,
		arg.LockEditing,
		arg.TextColor,
		arg.Toolbar,
		arg.Scale,
		arg.ShowGrid,
		arg.StoryColor,
		arg.StoryBackgroundColor,
		arg.TaskColor,
		arg.TaskBackgroundColor,
		arg.Width,
		arg.ZoomControl,
		arg.UpdatedAt,
		arg.Uid,
		arg.Diagram,
	)
	return err
}
