// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO
  items (
    diagram,
    diagram_id,
    is_bookmark,
    is_public,
    title,
    text,
    thumbnail
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7)
`

type CreateItemParams struct {
	Diagram    Diagram
	DiagramID  uuid.NullUUID
	IsBookmark sql.NullBool
	IsPublic   sql.NullBool
	Title      sql.NullString
	Text       string
	Thumbnail  sql.NullString
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.Diagram,
		arg.DiagramID,
		arg.IsBookmark,
		arg.IsPublic,
		arg.Title,
		arg.Text,
		arg.Thumbnail,
	)
	return err
}

const createSettings = `-- name: CreateSettings :exec
INSERT INTO
  settings (
    id,
    activity_color,
    activity_background_color,
    background_color,
    height,
    diagram,
    line_color,
    label_color,
    lock_editing,
    text_color,
    toolbar,
    scale,
    show_grid,
    story_color,
    story_background_color,
    task_color,
    task_background_color,
    width,
    zoom_control
  )
VALUES
  (
    1,
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18
  )
`

type CreateSettingsParams struct {
	ActivityColor           sql.NullString
	ActivityBackgroundColor sql.NullString
	BackgroundColor         sql.NullString
	Height                  sql.NullInt32
	Diagram                 Diagram
	LineColor               sql.NullString
	LabelColor              sql.NullString
	LockEditing             sql.NullBool
	TextColor               sql.NullString
	Toolbar                 sql.NullBool
	Scale                   sql.NullFloat64
	ShowGrid                sql.NullBool
	StoryColor              sql.NullString
	StoryBackgroundColor    sql.NullString
	TaskColor               sql.NullString
	TaskBackgroundColor     sql.NullString
	Width                   sql.NullInt32
	ZoomControl             sql.NullBool
}

func (q *Queries) CreateSettings(ctx context.Context, arg CreateSettingsParams) error {
	_, err := q.db.ExecContext(ctx, createSettings,
		arg.ActivityColor,
		arg.ActivityBackgroundColor,
		arg.BackgroundColor,
		arg.Height,
		arg.Diagram,
		arg.LineColor,
		arg.LabelColor,
		arg.LockEditing,
		arg.TextColor,
		arg.Toolbar,
		arg.Scale,
		arg.ShowGrid,
		arg.StoryColor,
		arg.StoryBackgroundColor,
		arg.TaskColor,
		arg.TaskBackgroundColor,
		arg.Width,
		arg.ZoomControl,
	)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE
  uid = $1
  AND diagram_id = $2
`

type DeleteItemParams struct {
	Uid       string
	DiagramID uuid.NullUUID
}

func (q *Queries) DeleteItem(ctx context.Context, arg DeleteItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteItem, arg.Uid, arg.DiagramID)
	return err
}

const getItem = `-- name: GetItem :one
SELECT
  id, uid, diagram_id, location, diagram, is_bookmark, is_public, title, text, thumbnail, created_at, updated_at
FROM
  items
WHERE
  uid = $1
  AND diagram_id = $2
`

type GetItemParams struct {
	Uid       string
	DiagramID uuid.NullUUID
}

func (q *Queries) GetItem(ctx context.Context, arg GetItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, arg.Uid, arg.DiagramID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.DiagramID,
		&i.Location,
		&i.Diagram,
		&i.IsBookmark,
		&i.IsPublic,
		&i.Title,
		&i.Text,
		&i.Thumbnail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSettings = `-- name: GetSettings :one
SELECT
  id, uid, activity_color, activity_background_color, background_color, diagram, height, line_color, label_color, lock_editing, text_color, toolbar, scale, show_grid, story_color, story_background_color, task_color, task_background_color, width, zoom_control, created_at, updated_at
FROM
  settings
WHERE
  uid = $1
  AND diagram = $2
`

type GetSettingsParams struct {
	Uid     string
	Diagram Diagram
}

func (q *Queries) GetSettings(ctx context.Context, arg GetSettingsParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSettings, arg.Uid, arg.Diagram)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.ActivityColor,
		&i.ActivityBackgroundColor,
		&i.BackgroundColor,
		&i.Diagram,
		&i.Height,
		&i.LineColor,
		&i.LabelColor,
		&i.LockEditing,
		&i.TextColor,
		&i.Toolbar,
		&i.Scale,
		&i.ShowGrid,
		&i.StoryColor,
		&i.StoryBackgroundColor,
		&i.TaskColor,
		&i.TaskBackgroundColor,
		&i.Width,
		&i.ZoomControl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT
  id, uid, diagram_id, location, diagram, is_bookmark, is_public, title, text, thumbnail, created_at, updated_at
FROM
  items
WHERE
  uid = $1
  AND is_public = $2
  AND is_bookmark = $3
LIMIT
  $4
OFFSET
  $5
`

type ListItemsParams struct {
	Uid        string
	IsPublic   sql.NullBool
	IsBookmark sql.NullBool
	Limit      int32
	Offset     int32
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems,
		arg.Uid,
		arg.IsPublic,
		arg.IsBookmark,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.DiagramID,
			&i.Location,
			&i.Diagram,
			&i.IsBookmark,
			&i.IsPublic,
			&i.Title,
			&i.Text,
			&i.Thumbnail,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
SET
  diagram = $1,
  is_bookmark = $2,
  is_public = $3,
  title = $4,
  text = $5,
  thumbnail = $6,
  updated_at = NOW()
WHERE
  uid = $7
  AND diagram_id = $8
`

type UpdateItemParams struct {
	Diagram    Diagram
	IsBookmark sql.NullBool
	IsPublic   sql.NullBool
	Title      sql.NullString
	Text       string
	Thumbnail  sql.NullString
	Uid        string
	DiagramID  uuid.NullUUID
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem,
		arg.Diagram,
		arg.IsBookmark,
		arg.IsPublic,
		arg.Title,
		arg.Text,
		arg.Thumbnail,
		arg.Uid,
		arg.DiagramID,
	)
	return err
}

const updateSettings = `-- name: UpdateSettings :exec
UPDATE settings
SET
  activity_color = $1,
  activity_background_color = $2,
  background_color = $3,
  height = $4,
  line_color = $5,
  label_color = $6,
  lock_editing = $7,
  text_color = $8,
  toolbar = $9,
  scale = $10,
  show_grid = $11,
  story_color = $12,
  story_background_color = $13,
  task_color = $14,
  task_background_color = $15,
  width = $16,
  zoom_control = $17
WHERE
  uid = $1
  AND diagram = $2
`

type UpdateSettingsParams struct {
	ActivityColor           sql.NullString
	ActivityBackgroundColor sql.NullString
	BackgroundColor         sql.NullString
	Height                  sql.NullInt32
	LineColor               sql.NullString
	LabelColor              sql.NullString
	LockEditing             sql.NullBool
	TextColor               sql.NullString
	Toolbar                 sql.NullBool
	Scale                   sql.NullFloat64
	ShowGrid                sql.NullBool
	StoryColor              sql.NullString
	StoryBackgroundColor    sql.NullString
	TaskColor               sql.NullString
	TaskBackgroundColor     sql.NullString
	Width                   sql.NullInt32
	ZoomControl             sql.NullBool
}

func (q *Queries) UpdateSettings(ctx context.Context, arg UpdateSettingsParams) error {
	_, err := q.db.ExecContext(ctx, updateSettings,
		arg.ActivityColor,
		arg.ActivityBackgroundColor,
		arg.BackgroundColor,
		arg.Height,
		arg.LineColor,
		arg.LabelColor,
		arg.LockEditing,
		arg.TextColor,
		arg.Toolbar,
		arg.Scale,
		arg.ShowGrid,
		arg.StoryColor,
		arg.StoryBackgroundColor,
		arg.TaskColor,
		arg.TaskBackgroundColor,
		arg.Width,
		arg.ZoomControl,
	)
	return err
}
