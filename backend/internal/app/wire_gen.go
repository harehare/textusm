// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/harehare/textusm/internal/app/handler"
	"github.com/harehare/textusm/internal/app/server"
	"github.com/harehare/textusm/internal/config"
	"github.com/harehare/textusm/internal/db"
	"github.com/harehare/textusm/internal/domain/service/diagramitem"
	"github.com/harehare/textusm/internal/domain/service/gistitem"
	"github.com/harehare/textusm/internal/domain/service/settings"
	"github.com/harehare/textusm/internal/github"
	"github.com/harehare/textusm/internal/infra/firebase"
	"github.com/harehare/textusm/internal/infra/postgres"
	"github.com/harehare/textusm/internal/infra/sqlite"
	"github.com/harehare/textusm/internal/presentation/api"
	"github.com/harehare/textusm/internal/presentation/graphql"
	"net/http"
)

// Injectors from wire.go:

func InitializeFirebaseServer() (*http.Server, func(), error) {
	env, err := config.NewEnv()
	if err != nil {
		return nil, nil, err
	}
	configConfig, err := config.NewConfig(env)
	if err != nil {
		return nil, nil, err
	}
	itemRepository := firebase.NewItemRepository(configConfig)
	shareRepository := firebase.NewShareRepository(configConfig)
	userRepository := firebase.NewUserRepository(configConfig)
	transaction := db.NewFirestoreTx(configConfig)
	clientID := provideGithubClientID(env)
	clientSecret := provideGithubClientSecret(env)
	service := diagramitem.NewService(itemRepository, shareRepository, userRepository, transaction, clientID, clientSecret)
	gistItemRepository := firebase.NewGistItemRepository(configConfig)
	gistitemService := gistitem.NewService(gistItemRepository, transaction, clientID, clientSecret)
	settingsRepository := firebase.NewSettingsRepository(configConfig)
	settingsService := settings.NewService(settingsRepository, transaction, clientID, clientSecret)
	resolver := graphql.New(service, gistitemService, settingsService, configConfig)
	apiApi := api.New(service, gistitemService, settingsService)
	logger := config.NewLogger(env)
	mux, err := handler.NewHandler(env, configConfig, resolver, apiApi, logger)
	if err != nil {
		return nil, nil, err
	}
	httpServer, cleanup := server.NewServer(mux, env, configConfig)
	return httpServer, func() {
		cleanup()
	}, nil
}

func InitializePostgresServer() (*http.Server, func(), error) {
	env, err := config.NewEnv()
	if err != nil {
		return nil, nil, err
	}
	configConfig, err := config.NewConfig(env)
	if err != nil {
		return nil, nil, err
	}
	itemRepository := postgres.NewItemRepository(configConfig)
	shareRepository := postgres.NewShareRepository(configConfig)
	userRepository := firebase.NewUserRepository(configConfig)
	transaction := db.NewPostgresTx(configConfig)
	clientID := provideGithubClientID(env)
	clientSecret := provideGithubClientSecret(env)
	service := diagramitem.NewService(itemRepository, shareRepository, userRepository, transaction, clientID, clientSecret)
	gistItemRepository := postgres.NewGistItemRepository(configConfig)
	gistitemService := gistitem.NewService(gistItemRepository, transaction, clientID, clientSecret)
	settingsRepository := postgres.NewSettingsRepository(configConfig)
	settingsService := settings.NewService(settingsRepository, transaction, clientID, clientSecret)
	resolver := graphql.New(service, gistitemService, settingsService, configConfig)
	apiApi := api.New(service, gistitemService, settingsService)
	logger := config.NewLogger(env)
	mux, err := handler.NewHandler(env, configConfig, resolver, apiApi, logger)
	if err != nil {
		return nil, nil, err
	}
	httpServer, cleanup := server.NewServer(mux, env, configConfig)
	return httpServer, func() {
		cleanup()
	}, nil
}

func InitializeSqliteServer() (*http.Server, func(), error) {
	env, err := config.NewEnv()
	if err != nil {
		return nil, nil, err
	}
	configConfig, err := config.NewConfig(env)
	if err != nil {
		return nil, nil, err
	}
	itemRepository := sqlite.NewItemRepository(configConfig)
	shareRepository := sqlite.NewShareRepository(configConfig)
	userRepository := firebase.NewUserRepository(configConfig)
	transaction := db.NewDBTx(configConfig)
	clientID := provideGithubClientID(env)
	clientSecret := provideGithubClientSecret(env)
	service := diagramitem.NewService(itemRepository, shareRepository, userRepository, transaction, clientID, clientSecret)
	gistItemRepository := sqlite.NewGistItemRepository(configConfig)
	gistitemService := gistitem.NewService(gistItemRepository, transaction, clientID, clientSecret)
	settingsRepository := sqlite.NewSettingsRepository(configConfig)
	settingsService := settings.NewService(settingsRepository, transaction, clientID, clientSecret)
	resolver := graphql.New(service, gistitemService, settingsService, configConfig)
	apiApi := api.New(service, gistitemService, settingsService)
	logger := config.NewLogger(env)
	mux, err := handler.NewHandler(env, configConfig, resolver, apiApi, logger)
	if err != nil {
		return nil, nil, err
	}
	httpServer, cleanup := server.NewServer(mux, env, configConfig)
	return httpServer, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideGithubClientID(env *config.Env) github.ClientID {
	return github.ClientID(env.GithubClientID)
}

func provideGithubClientSecret(env *config.Env) github.ClientSecret {
	return github.ClientSecret(env.GithubClientSecret)
}
