name: test
on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - release
      - master

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: test
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: ".node-version"
      - uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          working-directory: backend
          args: --issues-exit-code=0 --timeout=2m
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install Dependencies
        working-directory: frontend
        run: npm i --legacy-peer-deps
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: frontend
      - name: Generate elm-constants
        working-directory: frontend
        run: npm run dev:generate-elm-constants
        env:
          API_ROOT: ${{ secrets.API_ROOT }}
          WEB_ROOT: ${{ secrets.WEB_ROOT }}
          APP_VERSION: ${{ steps.package-version.outputs.current-version}}
          REPO_URL: ${{ secrets.REPO_URL }}
      - name: Check format
        working-directory: frontend
        run: npm run format:validate
      - name: Run Tests
        working-directory: frontend
        run: npm run test
      - uses: cypress-io/github-action@v5
        env:
          API_ROOT: ${{ secrets.API_ROOT }}
          WEB_ROOT: ${{ secrets.WEB_ROOT }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_AUTH_EMULATOR_HOST: ""
          SENTRY_ENABLE: "0"
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE: ${{ steps.package-version.outputs.current-version}}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          MONITOR_ENABLE: "0"
          USE_HTTPS: "0"
        with:
          start: "npm run dev:frontend"
          browser: chrome
          headed: true
          working-directory: frontend
          wait-on: "http://localhost:3000"
          wait-on-timeout: 120
          install: false

  analyze:
    name: Analyze
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["go", "typescript"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
