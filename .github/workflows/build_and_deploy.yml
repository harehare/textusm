name: build_and_deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run"
        type: environment
        default: production
        required: true

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    timeout-minutes: 10
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: ".node-version"
      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: frontend
        run: npm i --legacy-peer-deps
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: frontend
      - name: Generate elm-constants
        working-directory: frontend
        run: npm run dev:generate-elm-constants
        env:
          API_ROOT: ${{ secrets.API_ROOT }}
          WEB_ROOT: ${{ secrets.WEB_ROOT }}
          APP_VERSION: ${{ steps.package-version.outputs.current-version }}
          REPO_URL: ${{ secrets.REPO_URL }}
      - name: build
        working-directory: frontend
        env:
          API_ROOT: ${{ secrets.API_ROOT }}
          WEB_ROOT: ${{ secrets.WEB_ROOT }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_AUTH_EMULATOR_HOST: ""
          SENTRY_ENABLE: ${{ secrets.SENTRY_ENABLE }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE: ${{ steps.package-version.outputs.current-version}}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          MONITOR_ENABLE: ${{ secrets.MONITOR_ENABLE }}
        run: npm run prod
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: dist
          path: frontend/dist

  deploy-frontend:
    name: deploy-frontend
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: frontend/dist
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_TEXTUSM }}"
          projectId: textusm
          target: textusm
          channelId: live

  deploy-backend:
    name: deploy-backend
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy backend to render.com
        run: curl --silent --show-error --fail $RENDER_DEPLOY_HOOK_URL > /dev/null
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

  lighthouse:
    runs-on: ubuntu-latest
    name: lighthouse
    needs: [deploy-frontend, deploy-backend]
    steps:
      - name: Lighthouse test
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: "https://app.textusm.com"
          uploadArtifacts: true

  create-git-tag:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: frontend
      - name: tag is already existing to GITHUB_ENV
        run: |
          tag_is_existing=$(
            git fetch origin v${{ steps.package-version.outputs.current-version }} &&
            echo true ||
            echo false
          )
          echo "TAG_IS_EXISTING=${tag_is_existing}" >> $GITHUB_ENV
      - if: env.TAG_IS_EXISTING == 'false'
        run: |
          git tag v${{ steps.package-version.outputs.current-version }}
          git push origin v${{ steps.package-version.outputs.current-version }}
      - name: Build Changelog
        if: env.TAG_IS_EXISTING == 'false'
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        if: env.TAG_IS_EXISTING == 'false'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.current-version }}
          release_name: v${{ steps.package-version.outputs.current-version }}
          body: ${{steps.github_release.outputs.changelog}}
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
